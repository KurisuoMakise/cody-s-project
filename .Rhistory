#星期日只有季節性
if(month(day) >= 6 && month(day) <= 9){
return(0.83)
}else{
return(0.78)
}
}
}
###作時間細部資料
time_ex <- as.matrix(as.character(time,format='%H:%M:%S'))
time_ex
day_ex <- as.matrix(as.character(time,format = '%Y-%m-%d'))
day_ex
weekday_ex <- as.matrix(as.character(as.POSIXlt(day_ex)$wday))
weekday_ex
#放花費資料
money <- data.frame(bill = c(1:49488))
money2 <- data.frame(hour_bill = c(1:49488))
total <- cbind(money,money2)
for(i in money$bill){
total$bill[i] <- cal(time_ex[i],day_ex[i],weekday_ex[i])
}
summary(money$bill)
View(money)
View(money2)
View(total)
View(EB2_hourly_data)
#放花費資料
money <- data.frame(bill = c(index(EB2_hourly_data)))
View(money)
#放花費資料
money <- data.frame(bill = c(index(EB2_hourly_data)))
for(i in money$bill){
money$bill[i] <- cal(time_ex[i],day_ex[i],weekday_ex[i])*EB2_hourly_data$EB[i]
}
summary(money$bill)
#為了畫圖創建時間序列
time_seq <- as.POSIXct(time)
time_seq
xts_data <- xts(x = money,order.by=time_seq)
colnames(xts_data) <- c("bill")
#接收一個時間序列，並返回每個時區間的最後一個觀測值得位置向量，返回值以0開始
#參數on 支持各種時間週期, 包括"years", "quarters", "months"，"hours"和 "minutes"等
ep<-endpoints(xts_data, on="hours", k=1)  #on=”how your data is spaced”,k=how you want to club it(間隔的意思 1就是無間隔)
ep
#INDEX對x分組，每組用FUN函數計算一個值
#dataframey using lubridate
#ymd()
#format()
xts_data_daily<- apply.daily(xts_data,colSums, na.rm=TRUE)
#繪圖
ggplot(xts_data_daily,aes(x = index(xts_data_daily),y = bill)) +
geom_bar(stat = "identity")
View(dataplus_A_and_STR)
View(dataplus_A_and_STR)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary",fun.y = "sum") +
geom_line(stat="summary",fun.y = "sum") +
geom_ribbon(aes(ymin=min(value),ymax=max(value),x = hour),alpha = 0.3)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(nycflights13)
library(magrittr)
data <- flights %>%
select(hour, dep_delay, arr_delay) %>%
filter(hour> 4) %>%
pivot_longer(!hour)
data <- flights %>%
select(hour, dep_delay, arr_delay) %>%
filter(hour> 4) %>%
pivot_longer(!hour)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary",fun.y = "sum") +
geom_line(stat="summary",fun.y = "sum") +
geom_ribbon(aes(ymin=min(value),ymax=max(value),x = hour),alpha = 0.3)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary",fun.y = "sum") +
geom_line(stat="summary",fun.y = "sum") +
geom_ribbon(aes(ymin=min(value),ymax=max(value),x = x),alpha = 0.3)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon(aes(ymin=min(value),ymax=max(value),x = x),alpha = 0.3)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon(aes(ymin=min(value),ymax=max(value),x = hour),alpha = 0.3)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon(aes(ymin=min(value,na.rm = TRUE),ymax=max(value,na.rm = TRUE),x = hour),alpha = 0.3)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon(alpha = 0.3)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary",show.legend = T)
ggplot(data) +
geom_ribbon(aes(hour,value,color = name))
ggplot(data) +
geom_ribbon(aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary",show.legend = T)
ggplot(data,aes(hour,value,color = name)) +
geom_ribbon(aes(ymin = min(value),ymax = max(value),x = hour)) +
geom_point(stat="summary") +
geom_line(stat="summary",show.legend = T)
ggplot(data,aes(hour,value,color = name)) +
geom_ribbon(stat = "mean_sd",aes(ymin = min(value),ymax = max(value),x = hour)) +
geom_point(stat="summary") +
geom_line(stat="summary")
ggplot(data,aes(hour,value,color = name)) +
geom_ribbon(stat = "mean",aes(ymin = min(value),ymax = max(value),x = hour)) +
geom_point(stat="summary") +
geom_line(stat="summary")
ggplot(data,aes(hour,value,color = name)) +
geom_ribbon(stat = "mean",aes(ymin = 0,ymax = value,x = hour)) +
geom_point(stat="summary") +
geom_line(stat="summary")
ggplot(data,aes(hour,value,color = name)) +
geom_ribbon(aes(ymin = 0,ymax = value,x = hour)) +
geom_point(stat="summary") +
geom_line(stat="summary")
ggplot(data,aes(hour,value,color = name)) +
geom_ribbon() +
geom_point(stat="summary") +
geom_line(stat="summary")
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon(show.legend = FALSE)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon(aes(ymin = 0,ymax = value,x = hour),show.legend = FALSE)
data <- flights %>%
select(hour, dep_delay, arr_delay) %>%
mutate(max = max(value)) %>%
filter(hour> 4) %>%
pivot_longer(!hour)
data <- flights %>%
data <- flights %>%
library(dplyr)
data <- flights %>%
select(hour, dep_delay, arr_delay) %>%
filter(hour> 4) %>%
pivot_longer(!hour) %>%
mutate(r = value^2 + 0.5*value) %>%
mutate(l = value^2 - 0.5*value)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(nycflights13)
library(magrittr)
library(dplyr)
data <- flights %>%
select(hour, dep_delay, arr_delay) %>%
filter(hour> 4) %>%
pivot_longer(!hour) %>%
mutate(r = value^2 + 0.5*value) %>%
mutate(l = value^2 - 0.5*value)
View(data)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon(aes(ymin = l,ymax = r,x = hour),alpha = 0.3)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon(aes(ymin = l,ymax = r),alpha = 0.3)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon(aes(ymin = l,ymax = r,x = x),alpha = 0.3)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon(aes(ymin = l,ymax = r,x = hour),alpha = 0.3)
ggplot(data,aes(hour,value,ymin = value - l,ymax = value + r,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary")
ggplot(data,aes(hour,value,ymin = value - l,ymax = value + r,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon()
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon()
num <- {1,2,3}
num <- list(1,2,3)
num
num <- array(1,2,3)
num[1]
num <- list(c(1,3))
num[1]
num <- list(1302,1333,1290,1171,1176,1123,1095,1096)
print(i)
for(i in 1:8){
print(i)
}
list[i]
for(i in 1:8){
list[i]
}
for(i in 1:8){
num[i]
}
for(i in 1:8){
print(num[i])
}
for(i in 1:8){
print(1302/num[i])
}
for(i in 1:8){
print(1302/as.integer(num[i]))
}
for(i in 1:8){
print(as.integer(num[i])/1365.58+37.24*4.5))
}
for(i in 1:8){
print(as.integer(num[i])/(1365.58+37.24*4.5))
}
for(i in 1:8){
print(as.integer(num[i])/(1365.58+37.24*i))
}
for(i in 1:8){
print(1365.58+37.24*i)
print(as.integer(num[i])/(1365.58+37.24*i))
}
for(i in 1:8){
print(1365.58+37.24*i)
#print(as.integer(num[i])/(1365.58+37.24*i))
}
for(i in 1:8){
print(1365.58-37.24*i)
#print(as.integer(num[i])/(1365.58+37.24*i))
}
a <- list()
for(i in 1:8){
print(1365.58-37.24*i)
a[i] <- as.integer(num[i])/(1365.58+37.24*i)
}
for(i in 1:8){
print(1365.58-37.24*i)
a[i] <- as.integer(num[i])/(1365.58+37.24*i)
print("a = ",a[i])
}
for(i in 1:8){
print(1365.58-37.24*i)
a[i] <- as.integer(num[i])/(1365.58+37.24*i)
print("a = "a[i])
}
for(i in 1:8){
print(1365.58-37.24*i)
a[i] <- as.integer(num[i])/(1365.58+37.24*i)
print("a = %d",a[i])
}
for(i in 1:8){
print(1365.58-37.24*i)
a[i] <- as.integer(num[i])/(1365.58+37.24*i)
print("a = ")
print(a[i])
}
for(i in 1:8){
a[i] <- as.integer(num[i])/(1365.58+37.24*i)
print(a[i])
}
for(i in 1:8){
a[i] <- as.integer(num[i])/(1365.58-37.24*i)
print(a[i])
}
a105 <- list(293.74,309.40,293.53,279.57)
a106 <- list(287.43,283.59,281.95,269.94)
a107 <- list(277.29,282.47,275.26,259.90)
a108 <- list(267.27,285.51,276.26,266.62)
library(lubridate)
data_monthly <- apply.monthly(data,colSums,na.rm = TRUE)
library(zoo)
data_monthly <- apply.monthly(data,colSums,na.rm = TRUE)
library(stat)
library(stats)
data_monthly <- apply.monthly(data,colSums,na.rm = TRUE)
library(quantmod)
data_monthly <- apply.monthly(data,colSums,na.rm = TRUE)
class(data)
#########################################
#EBday <- readRDS("EB_day_20180101_20210228_aug.rds")
#EBD <- data.frame(
#  Time = EBday$datetime,
#  Usage = EBday$EB
#)
###################################處理資料
data <- readRDS("data_daily.rds")
#接受H1假設，檢定認為該序列為stationary
history <- subset(data,index(data) <= "2019-03-30")
n
library(forecast) #AUTO-ARIMA
library(tseries) #adf kpss test
library(dplyr) # mutate %>%
library(xts) #as.xts
library(tidyverse)
setwd("D:/NCTU_NOT_NYCU/Personal_Project/work")
#########################################
#EBday <- readRDS("EB_day_20180101_20210228_aug.rds")
#EBD <- data.frame(
#  Time = EBday$datetime,
#  Usage = EBday$EB
#)
###################################處理資料
data <- readRDS("data_daily.rds")
#接受H1假設，檢定認為該序列為stationary
history <- subset(data,index(data) <= "2019-03-30")
history <- subset(data,index(data) >= "2019-01-01")
#history <- history[-c(60),]
control <- subset(data,index(data) >= "2020-01-01")
control <- subset(control,index(control) <= "2020-03-30")
###########################################
#資料觀察(先將剛剛的資料轉為時間序列資料)
time_format <- ts(history$Usage,frequency = 7,start=min(index(history)),end = max(index(history)))
###########################################
#資料觀察(先將剛剛的資料轉為時間序列資料)
time_format <- ts(history$Usage,frequency = 7,start=min(index(history)),end = max(index(history)))
View(history)
###########################################
#歷史資料
time <- seq(as.Date(min(data$datatime)),length = length(data$datatime),by = "days")
data <- as.xts(data$EB2,order.by = time)
colnames(data) <- c("Usage")
data <- data[-c(1),]
adf.test(data)
#接受H1假設，檢定認為該序列為stationary
history <- subset(data,index(data) <= "2019-03-30")
history <- subset(data,index(data) >= "2019-01-01")
#history <- history[-c(60),]
control <- subset(data,index(data) >= "2020-01-01")
control <- subset(control,index(control) <= "2020-03-30")
###########################################
#資料觀察(先將剛剛的資料轉為時間序列資料)
time_format <- ts(history$Usage,frequency = 7,start=min(index(history)),end = max(index(history)))
#time_format
disassemble <- decompose(time_format)
adf.test(time_format)
plot(disassemble)
auto.arima(time_format,stepwise = F,trace = T,stationary = T,ic = c("aic"))
###########################################
#資料觀察(先將剛剛的資料轉為時間序列資料)
time_format <- ts(history$Usage,frequency = 1,start=min(index(history)),end = max(index(history)))
#time_format
disassemble <- decompose(time_format)
plot(disassemble)
auto.arima(time_format,stepwise = F,trace = T,stationary = T,ic = c("aic"))
###########################################
#資料觀察(先將剛剛的資料轉為時間序列資料)
time_format <- ts(history$Usage,frequency = 365.25,start=min(index(history)),end = max(index(history)))
auto.arima(time_format,stepwise = F,trace = T,stationary = T,ic = c("aic"))
###########################################
#資料觀察(先將剛剛的資料轉為時間序列資料)
time_format <- ts(history$Usage,frequency = 30,start=min(index(history)),end = max(index(history)))
#time_format
disassemble <- decompose(time_format)
plot(disassemble)
auto.arima(time_format,stepwise = F,trace = T,stationary = T,ic = c("aic"))
###########################################
#資料觀察(先將剛剛的資料轉為時間序列資料)
time_format <- ts(history$Usage,frequency = c(1,7,30,365),start=min(index(history)),end = max(index(history)))
###########################################
#資料觀察(先將剛剛的資料轉為時間序列資料)
time_format <- ts(history$Usage,frequency = c(1,7),start=min(index(history)),end = max(index(history)))
###########################################
#資料觀察(先將剛剛的資料轉為時間序列資料)
time_format <- ts(history$Usage,frequency = 1,start=min(index(history)),end = max(index(history)))
time_format
auto.arima(time_format,stepwise = F,trace = T,stationary = T,ic = c("aic"))
fit <- arima(time_format,order = c(5,0,0))#seasonal = list(order = c(1,0,1),period = 7))
tsdisplay(residuals(fit),lag.max = 24,main = "殘差")
#預測誤差及檢討空間
p <- forecast(fit,30,lambda = 1)
plot(p)
#接受H1假設，檢定認為該序列為stationary
history <- subset(data,index(data) <= "2019-03-30")
history <- subset(data,index(data) >= "2019-01-01")
###########################################
#資料觀察(先將剛剛的資料轉為時間序列資料)
time_format <- ts(history$Usage,frequency = 1,start=min(index(history)),end = max(index(history)))
auto.arima(time_format,stepwise = F,trace = T,stationary = T,ic = c("aic"))
預測 <- as.data.frame(p)
評估 <- cbind(預測,control)
評估 <- 評估 %>%
mutate(mae = abs(Usage - 評估$`Point Forecast`)) %>%
mutate(mape = abs(Usage - 評估$`Point Forecast`)/Usage)
mean(評估$mape)
#history <- history[-c(60),]
control <- subset(data,index(data) >= "2020-01-01")
control <- subset(control,index(control) <= "2020-03-30")
View(control)
#接受H1假設，檢定認為該序列為stationary
history <- subset(data,index(data) <= "2019-01-31")
history <- subset(data,index(data) >= "2019-01-01")
#history <- history[-c(60),]
control <- subset(data,index(data) >= "2020-01-01")
control <- subset(control,index(control) <= "2020-01-31")
###########################################
#資料觀察(先將剛剛的資料轉為時間序列資料)
time_format <- ts(history$Usage,frequency = 1,start=min(index(history)),end = max(index(history)))
#time_format
disassemble <- decompose(time_format)
auto.arima(time_format,stepwise = F,trace = T,stationary = T,ic = c("aic"))
fit <- arima(time_format,order = c(5,0,0))#seasonal = list(order = c(1,0,1),period = 7))
tsdisplay(residuals(fit),lag.max = 24,main = "殘差")
#預測誤差及檢討空間
p <- forecast(fit,30,lambda = 1)
plot(p)
預測 <- as.data.frame(p)
評估 <- cbind(預測,control)
評估 <- 評估 %>%
mutate(mae = abs(Usage - 評估$`Point Forecast`)) %>%
mutate(mape = abs(Usage - 評估$`Point Forecast`)/Usage)
mean(評估$mape)
#接受H1假設，檢定認為該序列為stationary
history <- subset(data,index(data) <= "2018-01-31")
history <- subset(data,index(data) >= "2018-01-01")
#history <- history[-c(60),]
control <- subset(data,index(data) >= "2019-01-01")
control <- subset(control,index(control) <= "2019-01-31")
###########################################
#資料觀察(先將剛剛的資料轉為時間序列資料)
time_format <- ts(history$Usage,frequency = 1,start=min(index(history)),end = max(index(history)))
auto.arima(time_format,stepwise = F,trace = T,stationary = T,ic = c("aic"))
fit <- arima(time_format,order = c(5,0,0))#seasonal = list(order = c(1,0,1),period = 7))
fit <- arima(time_format,order = c(5,0,0),seasonal = list(order = c(1,0,1),period = 7))
tsdisplay(residuals(fit),lag.max = 24,main = "殘差")
#預測誤差及檢討空間
p <- forecast(fit,30,lambda = 1)
plot(p)
#接受H1假設，檢定認為該序列為stationary
history <- subset(data,index(data) <= "2017-01-31")
history <- subset(data,index(data) >= "2017-01-01")
#history <- history[-c(60),]
control <- subset(data,index(data) >= "2018-01-01")
control <- subset(control,index(control) <= "2018-01-31")
###########################################
#資料觀察(先將剛剛的資料轉為時間序列資料)
time_format <- ts(history$Usage,frequency = 1,start=min(index(history)),end = max(index(history)))
time_format
#time_format
disassemble <- decompose(time_format)
plot(disassemble)
adf.test(time_format)
acf(time_format)
pacf(time_format)
auto.arima(time_format,stepwise = F,trace = T,stationary = T,ic = c("aic"))
fit <- arima(time_format,order = c(5,0,0),seasonal = list(order = c(1,0,1),period = 7))
#模型檢查
windows()
tsdisplay(residuals(fit),lag.max = 24,main = "殘差")
#預測誤差及檢討空間
p <- forecast(fit,30,lambda = 1)
plot(p)
預測 <- as.data.frame(p)
評估 <- cbind(預測,control)
評估 <- 評估 %>%
mutate(mae = abs(Usage - 評估$`Point Forecast`)) %>%
mutate(mape = abs(Usage - 評估$`Point Forecast`)/Usage)
mean(評估$mape)
View(history)
#接受H1假設，檢定認為該序列為stationary
history <- subset(data,index(data) <= "2017-01-31")
history <- subset(history,index(data) >= "2017-01-01")
history <- subset(history,index(history) >= "2017-01-01")
#接受H1假設，檢定認為該序列為stationary
history <- subset(data,index(data) <= "2017-01-31")
history <- subset(history,index(history) >= "2017-01-01")
#history <- history[-c(60),]
control <- subset(data,index(data) >= "2018-01-01")
control <- subset(control,index(control) <= "2018-01-31")
###########################################
#資料觀察(先將剛剛的資料轉為時間序列資料)
time_format <- ts(history$Usage,frequency = 1,start=min(index(history)),end = max(index(history)))
time_format
#time_format
disassemble <- decompose(time_format)
plot(disassemble)
adf.test(time_format)
acf(time_format)
pacf(time_format)
auto.arima(time_format,stepwise = F,trace = T,stationary = T,ic = c("aic"))
fit <- arima(time_format,order = c(1,0,1),seasonal = list(order = c(1,0,1),period = 7))
#模型檢查
windows()
#模型檢查
#windows()
tsdisplay(residuals(fit),lag.max = 24,main = "殘差")
plot(p)
預測 <- as.data.frame(p)
評估 <- cbind(預測,control)
評估 <- 評估 %>%
mutate(mae = abs(Usage - 評估$`Point Forecast`)) %>%
mutate(mape = abs(Usage - 評估$`Point Forecast`)/Usage)
View(control)
View(fit)
mean(評估$mape)
#history <- history[-c(60),]
control <- subset(data,index(data) > "2018-01-01")
control <- subset(control,index(control) <= "2018-01-31")
評估 <- cbind(預測,control)
評估 <- 評估 %>%
mutate(mae = abs(Usage - 評估$`Point Forecast`)) %>%
mutate(mape = abs(Usage - 評估$`Point Forecast`)/Usage)
mean(評估$mape)
