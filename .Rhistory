dataplus_A_and_STR <- readRDS("D:/NCTU_NOT_NYCU/Personal_Project/data/dataplus_A_and_STR.rds")
time <- with_tz(dataplus_A_and_STR$datetime,tz = "Asia/Taipei")
EB2 <- dataplus_A_and_STR$EB
EB2_hourly_data <- data.frame(x=time,EB2)
colnames(EB2_hourly_data) <- c("datatime","EB")
class(EB2_hourly_data)
#計費function
cal <- function(time,day,weekday){
if(weekday != 6 && weekday != 0){
if(month(day) >= 6 && month(day) <= 9){
if((time > "10:00:00" && time < "12:00:00") || (time > "13:00:00" && time < "17:00:00")){
return(3.47)
}else if((time > "07:30:00" && time < "10:00:00") || (time > "12:00:00" && time < "13:00:00") || (time > "17:00:00" && time < "22:30:00")){
return(2.01)
}else{
return(0.83)
}
}else{
#非夏日半尖峰
if(time > "07:30:00" && time < "22:30:00"){
return(1.95)
}else{
return(0.78)
}
}
}else if(weekday == 6){
#星期六只有半尖峰和離峰
if(month(day) >= 6 && month(day) <= 9){
if(time > "07:30:00" && time < "22:30:00"){
return(1.23)
}else{
return(0.83)
}
}else{
if(time > "07:30:00" && time < "22:30:00"){
return(1.17)
}else{
return(0.78)
}
}
}else if (weekday == 0){
#星期日只有季節性
if(month(day) >= 6 && month(day) <= 9){
return(0.83)
}else{
return(0.78)
}
}
}
###作時間細部資料
time_ex <- as.matrix(as.character(time,format='%H:%M:%S'))
time_ex
day_ex <- as.matrix(as.character(time,format = '%Y-%m-%d'))
day_ex
weekday_ex <- as.matrix(as.character(as.POSIXlt(day_ex)$wday))
weekday_ex
#放花費資料
money <- data.frame(bill = c(1:49488))
money2 <- data.frame(hour_bill = c(1:49488))
total <- cbind(money,money2)
for(i in money$bill){
total$bill[i] <- cal(time_ex[i],day_ex[i],weekday_ex[i])
}
summary(money$bill)
View(money)
View(money2)
View(total)
View(EB2_hourly_data)
#放花費資料
money <- data.frame(bill = c(index(EB2_hourly_data)))
View(money)
#放花費資料
money <- data.frame(bill = c(index(EB2_hourly_data)))
for(i in money$bill){
money$bill[i] <- cal(time_ex[i],day_ex[i],weekday_ex[i])*EB2_hourly_data$EB[i]
}
summary(money$bill)
#為了畫圖創建時間序列
time_seq <- as.POSIXct(time)
time_seq
xts_data <- xts(x = money,order.by=time_seq)
colnames(xts_data) <- c("bill")
#接收一個時間序列，並返回每個時區間的最後一個觀測值得位置向量，返回值以0開始
#參數on 支持各種時間週期, 包括"years", "quarters", "months"，"hours"和 "minutes"等
ep<-endpoints(xts_data, on="hours", k=1)  #on=”how your data is spaced”,k=how you want to club it(間隔的意思 1就是無間隔)
ep
#INDEX對x分組，每組用FUN函數計算一個值
#dataframey using lubridate
#ymd()
#format()
xts_data_daily<- apply.daily(xts_data,colSums, na.rm=TRUE)
#繪圖
ggplot(xts_data_daily,aes(x = index(xts_data_daily),y = bill)) +
geom_bar(stat = "identity")
View(dataplus_A_and_STR)
View(dataplus_A_and_STR)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary",fun.y = "sum") +
geom_line(stat="summary",fun.y = "sum") +
geom_ribbon(aes(ymin=min(value),ymax=max(value),x = hour),alpha = 0.3)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(nycflights13)
library(magrittr)
data <- flights %>%
select(hour, dep_delay, arr_delay) %>%
filter(hour> 4) %>%
pivot_longer(!hour)
data <- flights %>%
select(hour, dep_delay, arr_delay) %>%
filter(hour> 4) %>%
pivot_longer(!hour)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary",fun.y = "sum") +
geom_line(stat="summary",fun.y = "sum") +
geom_ribbon(aes(ymin=min(value),ymax=max(value),x = hour),alpha = 0.3)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary",fun.y = "sum") +
geom_line(stat="summary",fun.y = "sum") +
geom_ribbon(aes(ymin=min(value),ymax=max(value),x = x),alpha = 0.3)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon(aes(ymin=min(value),ymax=max(value),x = x),alpha = 0.3)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon(aes(ymin=min(value),ymax=max(value),x = hour),alpha = 0.3)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon(aes(ymin=min(value,na.rm = TRUE),ymax=max(value,na.rm = TRUE),x = hour),alpha = 0.3)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon(alpha = 0.3)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary",show.legend = T)
ggplot(data) +
geom_ribbon(aes(hour,value,color = name))
ggplot(data) +
geom_ribbon(aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary",show.legend = T)
ggplot(data,aes(hour,value,color = name)) +
geom_ribbon(aes(ymin = min(value),ymax = max(value),x = hour)) +
geom_point(stat="summary") +
geom_line(stat="summary",show.legend = T)
ggplot(data,aes(hour,value,color = name)) +
geom_ribbon(stat = "mean_sd",aes(ymin = min(value),ymax = max(value),x = hour)) +
geom_point(stat="summary") +
geom_line(stat="summary")
ggplot(data,aes(hour,value,color = name)) +
geom_ribbon(stat = "mean",aes(ymin = min(value),ymax = max(value),x = hour)) +
geom_point(stat="summary") +
geom_line(stat="summary")
ggplot(data,aes(hour,value,color = name)) +
geom_ribbon(stat = "mean",aes(ymin = 0,ymax = value,x = hour)) +
geom_point(stat="summary") +
geom_line(stat="summary")
ggplot(data,aes(hour,value,color = name)) +
geom_ribbon(aes(ymin = 0,ymax = value,x = hour)) +
geom_point(stat="summary") +
geom_line(stat="summary")
ggplot(data,aes(hour,value,color = name)) +
geom_ribbon() +
geom_point(stat="summary") +
geom_line(stat="summary")
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon(show.legend = FALSE)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon(aes(ymin = 0,ymax = value,x = hour),show.legend = FALSE)
data <- flights %>%
select(hour, dep_delay, arr_delay) %>%
mutate(max = max(value)) %>%
filter(hour> 4) %>%
pivot_longer(!hour)
data <- flights %>%
data <- flights %>%
library(dplyr)
data <- flights %>%
select(hour, dep_delay, arr_delay) %>%
filter(hour> 4) %>%
pivot_longer(!hour) %>%
mutate(r = value^2 + 0.5*value) %>%
mutate(l = value^2 - 0.5*value)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(nycflights13)
library(magrittr)
library(dplyr)
data <- flights %>%
select(hour, dep_delay, arr_delay) %>%
filter(hour> 4) %>%
pivot_longer(!hour) %>%
mutate(r = value^2 + 0.5*value) %>%
mutate(l = value^2 - 0.5*value)
View(data)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon(aes(ymin = l,ymax = r,x = hour),alpha = 0.3)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon(aes(ymin = l,ymax = r),alpha = 0.3)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon(aes(ymin = l,ymax = r,x = x),alpha = 0.3)
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon(aes(ymin = l,ymax = r,x = hour),alpha = 0.3)
ggplot(data,aes(hour,value,ymin = value - l,ymax = value + r,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary")
ggplot(data,aes(hour,value,ymin = value - l,ymax = value + r,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon()
ggplot(data,aes(hour,value,color = name)) +
geom_point(stat="summary") +
geom_line(stat="summary") +
geom_ribbon()
num <- {1,2,3}
num <- list(1,2,3)
num
num <- array(1,2,3)
num[1]
num <- list(c(1,3))
num[1]
num <- list(1302,1333,1290,1171,1176,1123,1095,1096)
print(i)
for(i in 1:8){
print(i)
}
list[i]
for(i in 1:8){
list[i]
}
for(i in 1:8){
num[i]
}
for(i in 1:8){
print(num[i])
}
for(i in 1:8){
print(1302/num[i])
}
for(i in 1:8){
print(1302/as.integer(num[i]))
}
for(i in 1:8){
print(as.integer(num[i])/1365.58+37.24*4.5))
}
for(i in 1:8){
print(as.integer(num[i])/(1365.58+37.24*4.5))
}
for(i in 1:8){
print(as.integer(num[i])/(1365.58+37.24*i))
}
for(i in 1:8){
print(1365.58+37.24*i)
print(as.integer(num[i])/(1365.58+37.24*i))
}
for(i in 1:8){
print(1365.58+37.24*i)
#print(as.integer(num[i])/(1365.58+37.24*i))
}
for(i in 1:8){
print(1365.58-37.24*i)
#print(as.integer(num[i])/(1365.58+37.24*i))
}
a <- list()
for(i in 1:8){
print(1365.58-37.24*i)
a[i] <- as.integer(num[i])/(1365.58+37.24*i)
}
for(i in 1:8){
print(1365.58-37.24*i)
a[i] <- as.integer(num[i])/(1365.58+37.24*i)
print("a = ",a[i])
}
for(i in 1:8){
print(1365.58-37.24*i)
a[i] <- as.integer(num[i])/(1365.58+37.24*i)
print("a = "a[i])
}
for(i in 1:8){
print(1365.58-37.24*i)
a[i] <- as.integer(num[i])/(1365.58+37.24*i)
print("a = %d",a[i])
}
for(i in 1:8){
print(1365.58-37.24*i)
a[i] <- as.integer(num[i])/(1365.58+37.24*i)
print("a = ")
print(a[i])
}
for(i in 1:8){
a[i] <- as.integer(num[i])/(1365.58+37.24*i)
print(a[i])
}
for(i in 1:8){
a[i] <- as.integer(num[i])/(1365.58-37.24*i)
print(a[i])
}
a105 <- list(293.74,309.40,293.53,279.57)
a106 <- list(287.43,283.59,281.95,269.94)
a107 <- list(277.29,282.47,275.26,259.90)
a108 <- list(267.27,285.51,276.26,266.62)
library(lubridate)
data_monthly <- apply.monthly(data,colSums,na.rm = TRUE)
library(zoo)
data_monthly <- apply.monthly(data,colSums,na.rm = TRUE)
library(stat)
library(stats)
data_monthly <- apply.monthly(data,colSums,na.rm = TRUE)
library(quantmod)
data_monthly <- apply.monthly(data,colSums,na.rm = TRUE)
class(data)
#########################################
#EBday <- readRDS("EB_day_20180101_20210228_aug.rds")
#EBD <- data.frame(
#  Time = EBday$datetime,
#  Usage = EBday$EB
#)
###################################處理資料
data <- readRDS("data_daily.rds")
board <- dashboardPage(dashboardHeader(title = "電表數據展示儀表板"),sidebar,body)
library(dplyr)          #包含以下函數:filter() select() mutate() arrange() summarise() group_by()等等
library(shiny)
library(shinydashboard) #分開寫法
library(shinyWidgets)   #設定網頁背景顏色等外觀
library(ggplot2)        #包含以下函數: ggplot() geom...
library(readxl)         #讀取excel檔案所需函數:read_excel()
library(kableExtra)     #展示實地記錄所使用表格函數:kable() kable_styling()等等
library(dygraphs)       #包含以下函數:dygraph() dyRangeSelector()等等
library(tidyverse)      #包含以下函數:read_rds()
getwd()
setwd("D:/NCTU_NOT_NYCU/Personal_Project/work")
#########################匯入檔案區
staticEB2 <- as.data.frame(read_excel("static_EB2.xlsx"))       #實地空間資訊調查記錄
EBday <- readRDS("EB_day_20180101_20210228_aug.rds")            #工二每日用電紀錄
xts_data_daily <- read_rds("money.rds")                         #電費
#########################數據處理
EBD <- data.frame(
Time = EBday$datetime,
Usage = EBday$EB
)
#########################函數創建
colcal <- function(a){                                          #列表警示函數
m <- mean(a$class_time)
z <- 0
li <- c()
for(i in index(a)){
if(a$class_time[i] > m){
li[z+1] <- i
z = z + 1
}
}
return(li)
}
###############################################網頁側邊(前端)
sidebar <- dashboardSidebar(                                    #選擇欄
sidebarMenu(
menuItem("控制選單",tabName = "dashboard"),
dateRangeInput("date",h3("選擇日期(範圍)"),
min = min(EBD$Time),
max = max(EBD$Time),
start = min(EBD$Time),
end = max(EBD$Time)
)
),
selectInput("select", label = h3("分析模式"),
#list第一個為下拉列表顯示，第二個為連結用tag
choices = list(
"電表數據" = "graph1",
"峰值分布" = "peak_scatter",
"用電實地調查推測紀錄" = "record",
"電費支出" = "BILL"),
selected = 1
)
)
###############################################網頁主內容(前端)
body <- dashboardBody(                                         #網頁主內容排版
setBackgroundColor(color = "#2F4F4F"),
##第一個condition中input.???，???抓取你要連結的tag
conditionalPanel(
condition = "input.select == 'graph1'",
#HTML的<p></p>意思
h1(id = "1","電表數據",align = "center"),
#status->外框顏色
plotOutput("graph")
),
conditionalPanel(
condition = "input.select == 'peak_scatter'",
h1(id = "2","峰值分布",align = "center"),
plotOutput("peak"),
hr(),
fluidRow(
column(6,plotOutput("page1")),
column(6,plotOutput("page2"))
)
),
conditionalPanel(
condition = "input.select == 'record'",
h1(id = "3","用電實地調查記錄",align = "center"),
tableOutput("recording")
),
conditionalPanel(
condition = "input.select == 'BILL'",
h1(id = "4","電費支出",align = "center"),
dygraphOutput("expanse")
)
)
board <- dashboardPage(dashboardHeader(title = "電表數據展示儀表板"),sidebar,body)
ui <- board
###############################################網頁內容(後端)
server <- function(input,output){
##折線圖#########
graphing <- reactive({
filter(EBD,
between(EBD$Time,
input$date[1],
input$date[2])
)
})
output$graph <- renderPlot({
ggplot(graphing(),aes(x = Time,y = Usage),main = "電量分析") +
geom_line(colour='green') +
theme(panel.background = element_rect(fill = 'black', colour = 'white')) +
scale_x_date(date_labels = "%y-%m-%d")
})
################
##峰值分布######
peak_scatter <- reactive({
filter(EBD,
between(EBD$Time,
input$date[1],
input$date[2]),
Usage > 1250
)
})
output$peak <- renderPlot({
ggplot(peak_scatter(),aes(x = Time,y = Usage),main = "峰值分布") +
geom_point(color = "red") +
geom_hline(yintercept=1500, linetype="dashed", color = "red")
})
################
##KABLE#########
output$recording <- function(){
staticEB2 %>%
kable("html") %>%
kable_styling("striped",full_width = F) %>%
column_spec(3:5,bold = T) %>%
row_spec(c(colcal(staticEB2)),background = "red")
}
################
####電費圖片###########
output$expanse <- renderDygraph({
dygraph(xts_data_daily) %>%
dyRangeSelector(height = 40)
})
#######################
##################################實地勘察數據處理
##table(staticEB2$category)
#sum(table(table(staticEB2$category))) 找出有幾種不同資料
category <- as.data.frame(cbind(c("assistant_room","classroom","department_office","lab","library","lounge","meeting_room","office"),rbind(0,0,0,0,0,0,0,0)))
colnames(category) <- c("category","numbers")
list <- c("assistant_room","classroom","department_office","lab","library","lounge","meeting_room","office")
for(i in 1:length(staticEB2$category)){
if(is.na(staticEB2$category[i]) == FALSE){
for(j in 1:length(list)){
if(staticEB2$category[i] == list[j]){
category$numbers[j] = as.numeric(category$numbers[j]) + 1
}
}
}
}
output$page1 <- renderPlot({
ggplot(category,aes(x = category,y = numbers,fill = category)) +
geom_bar(stat = "identity") +
geom_text(aes(label = numbers),vjust = 1.6,size = 5.5,color = "white")
})
##################################################
}
shinyApp(ui,server)
library(zoo)
shinyApp(ui,server)
library(shiny); runApp('visualization_project.R')
getwd()
runApp('visualization_project.R')
runApp('visualization_project.R')
runApp('visualization_project.R')
runApp('visualization_project.R')
runApp('visualization_project.R')
runApp('visualization_project.R')
runApp('visualization_project.R')
runApp('visualization_project.R')
runApp('visualization_project.R')
runApp('visualization_project.R')
runApp('visualization_project.R')
runApp('visualization_project.R')
